#!/usr/bin/python3
import subprocess
import os
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk, GdkPixbuf
import time
import requests
import random
import zipfile
from io import BytesIO
import shutil
import notify2

notify2.init("catgamegtk")
dpkg = 0
current_dir = os.path.dirname(os.path.abspath(__file__))
if dpkg == 1:
    datapath = "/usr/share/catgamegtk/data/"
else:
    datapath = os.path.join(current_dir, "data/")

version = "2.0"
versiona = "release 2.0"
cdata = os.path.expanduser("~/.local/share/catdata")
if os.environ.get("LANG") == "ru_RU.UTF-8":
    lang = "RU"
else:
    lang = "ENG"

with open(os.path.join(datapath, f"lang-files/{lang}.txt"), "r", encoding="utf-8") as f:
    langfile = f.readlines()


def pushn(p, n, m):
    notification = notify2.Notification(n, m, p)
    notification.set_urgency(notify2.URGENCY_NORMAL)
    notification.set_timeout(5000)
    notification.show()
    return


def upsure(v):
    warning = Gtk.MessageDialog(
        title="catgameGTK",
        message_type=Gtk.MessageType.WARNING,
        buttons=Gtk.ButtonsType.OK,
        text=f"{langfile[1].strip()} {v}"
    )
    response = warning.run()
    if response == Gtk.ResponseType.OK:
        warning.destroy()
    else:
        warning.destroy()


def check():
    if os.path.exists(os.path.expanduser("~/.config/catgamegtk")):
        if os.path.exists(os.path.expanduser("~/.config/catgamegtk/settings.txt")):
            with open(os.path.join(os.path.expanduser("~/.config/catgamegtk"), "settings.txt"), "r", encoding="utf-8") as f:
                conf = f.readlines()
        else:
            conf = ["1"]
    else:
        os.makedirs(os.path.expanduser("~/.config/catgamegtk"), exist_ok=True)
        conf = ["1"]
    if not int(conf[0].strip()) == 0:
        response = requests.get('https://api.github.com/repos/lgor360/catgameGTK/releases/latest')

        if response.status_code == 200:
            release_data = response.json()
            v = release_data['tag_name']
            if version > v:
                print("beta (whaaaaaa)")
                pushn(os.path.join(datapath, "icon.png"), "catgameGTK", f"{langfile[2].strip()}")
            elif version < v:
                print("old")
                upsure(v)
        else:
            print(f'error: {response.status_code} - {response.text}')
    return


def ceat():
    if os.path.exists(os.path.join(cdata, "teat.txt")):
        with open(os.path.join(cdata, "teat.txt"), "r", encoding="utf-8") as f:
           teat = f.read()
        teat = int(teat)
        if int(time.time()) >= teat:
            cattxt[1] = f"sad and hungry\n"
            cattxt[3] = "sad.png\n"
            caticon = "sad.png"
            path = os.path.join(datapath, f"colors/{cview}/sad.png")
            with open(os.path.join(cdata, "cat.txt"), "w") as f:
                f.writelines(cattxt)
            os.remove(os.path.join(cdata, "teat.txt"))
            q_item.set_from_file(os.path.join(datapath, f"colors/{cview}/sad.png"))

    return


def on_response(dialog, ftype):
    cicon = cattxt[3].strip()
    name = cattxt[0].strip()
    print(ftype)

    if ftype == "catfood":
        eat()
    elif ftype == "desert":
        path = os.path.join(datapath, f"colors/{cview}/{cicon}")
        pushn(path, name, f"{langfile[47].strip()}")

    dialog.destroy()


def sethat(ftype):
    het_item.set_from_file(os.path.join(datapath, f"hats/{ftype}.png"))
    if len(cattxt) >= 6:
        cattxt.remove(cattxt[5])
        print(cattxt)
    cattxt[4] = f"{cattxt[4].strip()}\n"
    cattxt.insert(5, ftype)
    print(cattxt)
    with open(os.path.join(cdata, "cat.txt"), "w") as f:
        f.writelines(cattxt)


def delhat():
    het_item.set_from_pixbuf(None)
    if len(cattxt) >= 6:
        cattxt.remove(cattxt[5])
        cattxt[4] = cattxt[4].strip()
        print(cattxt)
        with open(os.path.join(cdata, "cat.txt"), "w") as f:
            f.writelines(cattxt)


def store(button):
    dialog = Gtk.Dialog(f"{langfile[5].strip()}", None, 0,)

    l = Gtk.Label(label=f"{langfile[6].strip()}")
    dialog.vbox.pack_start(l, False, True, 10)

    magicianshat = Gtk.Button()
    oi = GdkPixbuf.Pixbuf.new_from_file(os.path.join(datapath, "hats/magicianshat.png"))
    oki = oi.scale_simple(140, 140, GdkPixbuf.InterpType.BILINEAR)
    okii = Gtk.Image.new_from_pixbuf(oki)
    magicianshat.add(okii)
    cap = Gtk.Button()
    koi = GdkPixbuf.Pixbuf.new_from_file(os.path.join(datapath, "hats/cap.png"))
    koki = koi.scale_simple(140, 140, GdkPixbuf.InterpType.BILINEAR)
    kokii = Gtk.Image.new_from_pixbuf(koki)
    cap.add(kokii)
    delete = Gtk.Button(label=f"{langfile[7].strip()}")

    delete.connect("clicked", lambda w: delhat())
    magicianshat.connect("clicked", lambda w: sethat("magicianshat"))
    cap.connect("clicked", lambda w: sethat("cap"))

    dialog.action_area.pack_start(magicianshat, True, True, 0)
    dialog.action_area.pack_start(cap, True, True, 0)
    dialog.action_area.pack_start(delete, True, True, 0)

    dialog.set_default_size(200, 70)
    dialog.set_resizable(False)
    dialog.show_all()


def sseti(dialog, se):
    s = se.get_active()
    if s == True:
        svalue = "1"
    elif s == False:
        svalue = "0"
    print(svalue)
    with open(os.path.expanduser("~/.config/catgamegtk/settings.txt"), "w") as f:
        f.writelines(f"{svalue}")

    dialog.destroy()


def deletecat(func):
    pushn(os.path.join(datapath, f"colors/{cview}/{cattxt[3].strip()}"), cattxt[0].strip(), "what?..")
    warning = Gtk.MessageDialog(
        title="catgameGTK",
        message_type=Gtk.MessageType.WARNING,
        buttons=Gtk.ButtonsType.OK_CANCEL,
        text=f"{langfile[10].strip()}"
    )
    warning.format_secondary_text(
        f"{langfile[11].strip()}"
    )
    response = warning.run()
    if response == Gtk.ResponseType.OK:
        pushn(os.path.join(datapath, f"colors/{cview}/sad.png"), cattxt[0].strip(), "oh...")
        time.sleep(1)
        warning.destroy()
        pushn(os.path.join(datapath, f"icon.png"), "catgameGTK", "deleting your cat...")
        inf_item.set_text("cat name: cat_name")
        q_item.set_from_file(os.path.join(datapath, "colors/cview/happy.png"))
        het_item.set_from_file(os.path.join(datapath, "colors/cview/happy.png"))
        pushn(os.path.join(datapath, f"colors/{cview}/cat_status.png"), "cat_name", "AAAAAAAAAAAAAAAAAA")
        if os.path.exists(os.path.join(cdata, "teat.txt")):
            os.remove(os.path.join(cdata, "teat.txt"))
        os.remove(os.path.join(cdata, "cat.txt"))
        os.rmdir(os.path.expanduser("~/.local/share/catdata"))
        pushn(os.path.join(datapath, f"icon.png"), "catgameGTK", "success!")
        Gtk.main_quit()
    else:
        warning.destroy()


def rencat(func):
    dialog = Gtk.Dialog(f"{langfile[15].strip()}", None, 0,
                        (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                          Gtk.STOCK_OK, Gtk.ResponseType.OK))


    input_box = Gtk.Entry()
    dialog.vbox.pack_start(input_box, True, True, 0)


    dialog.set_default_size(200, 70)
    dialog.set_resizable(False)
    dialog.show_all()

    response = dialog.run()

    if response == Gtk.ResponseType.OK:
        user_input = input_box.get_text()
        cattxt[0] = f"{user_input}\n"
        print(cattxt)
        with open(os.path.join(cdata, "cat.txt"), "w") as f:
            f.writelines(cattxt)
        inf_item.set_text(f"cat name: {user_input}")
    dialog.destroy()


def setti(event):
    if os.path.exists(os.path.expanduser("~/.config/catgamegtk/settings.txt")):
        with open(os.path.expanduser("~/.config/catgamegtk/settings.txt"), "r", encoding="utf-8") as f:
            conf = f.readlines()
    else:
        with open(os.path.expanduser("~/.config/catgamegtk/settings.txt"), "w") as f:
            f.write("1")
        with open(os.path.expanduser("~/.config/catgamegtk/settings.txt"), "r", encoding="utf-8") as f:
            conf = f.readlines()

    dialog = Gtk.Dialog("settings", None, 0)
    # hi for programmers! oh! i want to say you what you are the best because you find this message! bye :3

    box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=1)
    box.set_homogeneous(True)
    dialog.vbox.add(box)

    upgra = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=1)
    box.add(upgra)
    l = Gtk.Label(label=f"{langfile[21].strip()}")
    l.set_hexpand(True)
    button_ok = Gtk.Button(label=f"{langfile[24].strip()}")
    button_ok.set_hexpand(True)
    button_cancel = Gtk.Button(label=f"{langfile[25].strip()}")
    button_cancel.set_hexpand(True)
    updates = Gtk.Switch()
    updates.set_hexpand(True)
    updates.set_active(bool(int(conf[0].strip())))
    upgra.add(l)
    upgra.add(updates)
    dialog.action_area.add(button_cancel)
    dialog.action_area.add(button_ok)
    button_ok.connect("clicked", lambda w: sseti(dialog, updates))
    button_cancel.connect("clicked", lambda w: on_response(dialog, "cancel"))
    rename = Gtk.Button(label=f"{langfile[22].strip()}")
    rename.set_hexpand(True)
    delcat = Gtk.Button(label=f"{langfile[23].strip()}")
    delcat.set_hexpand(True)

    delcat.connect("clicked", lambda w: deletecat("settings"))
    rename.connect("clicked", lambda w: rencat("settings"))

    box.add(rename)
    box.add(delcat)

    dialog.set_default_size(240, 70)
    dialog.set_resizable(False)
    dialog.show_all()


def what(event):
    dialog = Gtk.Dialog(f"{langfile[52].strip()}", None, 0,)

    l = Gtk.Label(label=f"{langfile[28].strip()}")
    dialog.vbox.pack_start(l, False, True, 10)

    button_ok = Gtk.Button()
    oi = GdkPixbuf.Pixbuf.new_from_file(os.path.join(datapath, "cf.png"))
    oki = oi.scale_simple(135, 165, GdkPixbuf.InterpType.BILINEAR)
    okii = Gtk.Image.new_from_pixbuf(oki)
    button_ok.add(okii)
    button_cancel = Gtk.Button()
    koi = GdkPixbuf.Pixbuf.new_from_file(os.path.join(datapath, "d.png"))
    koki = koi.scale_simple(135, 165, GdkPixbuf.InterpType.BILINEAR)
    kokii = Gtk.Image.new_from_pixbuf(koki)
    button_cancel.add(kokii)

    button_ok.connect("clicked", lambda w: on_response(dialog, "catfood"))
    button_cancel.connect("clicked", lambda w: on_response(dialog, "desert"))

    dialog.action_area.pack_start(button_ok, True, True, 0)
    dialog.action_area.pack_start(button_cancel, True, True, 0)

    dialog.set_default_size(200, 70)
    dialog.set_resizable(False)
    dialog.show_all()


def infgame(button):
    with open(os.path.join(datapath, "license.txt"), "r", encoding="utf-8") as f:
       license = f.read()

    ab = Gtk.AboutDialog()
    ab.set_program_name("catgameGTK")
    ab.set_version(versiona)
    ab.set_comments(f"{langfile[31].strip()}\n{langfile[32].strip()}\n \n{langfile[33].strip()}")
    ab.set_authors(["Igor360"])
    ab.set_website("https://github.com/lgor360/catgameGTK")
    ab.set_license(license)
    ic = GdkPixbuf.Pixbuf.new_from_file(os.path.join(datapath, "icon.png"))
    icon = ic.scale_simple(150, 150, GdkPixbuf.InterpType.BILINEAR)
    ab.set_logo(icon)
    ab.connect("response", lambda dialog, response: dialog.destroy())
    ab.show()


def pur(event):
    with open(os.path.join(cdata, "cat.txt"), "r", encoding="utf-8") as f:
       cattxt = f.readlines()
    cicon = cattxt[3].strip()
    name = cattxt[0].strip()

    path = os.path.join(datapath, f"colors/{cview}/{cicon}")
    pushn(path, name, f"{langfile[36].strip()}")


def cond(event):
    if cattxt[1].strip() == "happy and not hungry":
        condition = langfile[39].strip()
    else:
        condition = langfile[40].strip()
    cicon = cattxt[3].strip()
    name = cattxt[0].strip()

    path = os.path.join(datapath, f"colors/{cview}/{cicon}")
    pushn(path, name, condition)


def game(event):
    games = cattxt[2].strip()

    path = os.path.join(datapath, f"icon.png")
    games = int(games)
    games += 1
    pushn(path, "catgameGTK", f"{games} {langfile[43].strip()}")
    
    cattxt[2] = f"{games}\n"

    with open(os.path.join(cdata, "cat.txt"), "w") as f:
        f.writelines(cattxt)


def eat():
    cicon = cattxt[3].strip()
    name = cattxt[0].strip()

    path = os.path.join(datapath, f"colors/{cview}/happy.png")
    
    q_item.set_from_file(os.path.join(datapath, f"colors/{cview}/happy.png"))
    cattxt[1] = f"happy and not hungry\n"
    cattxt[3] = "happy.png\n"

    with open(os.path.join(cdata, "cat.txt"), "w") as f:
        f.writelines(cattxt)
    teat = int(time.time()) + 10800
    with open(os.path.join(cdata, "teat.txt"), "w") as f:
        f.write(f"{teat}")
    pushn(path, name, f"{langfile[46].strip()}")


def main():
    global cattxt
    with open(os.path.join(cdata, "cat.txt"), "r", encoding="utf-8") as f:
       cattxt = f.readlines()
    print(cattxt)
    global cview

    if 4 == len(cattxt):
        cattxt[3] = f"{cattxt[3]}\n"
        randome = random.randint(1, 3)
        cattxt.insert(4, f"{randome}")
        with open(os.path.join(cdata, "cat.txt"), "w") as f:
            f.writelines(cattxt)
        with open(os.path.join(cdata, "cat.txt"), "r", encoding="utf-8") as f:
            cattxt = f.readlines()
        print(cattxt[4])
        cview = cattxt[4].strip()
    else:
        cview = cattxt[4].strip()
        
    check()

    window = Gtk.ApplicationWindow(application=app, title="catgameGTK")
    window.set_resizable(False)
    window.set_default_size(50, 350)
    name = cattxt[0].strip()
    caticon = cattxt[3].strip()
    print(f"data/colors/{cview}/{caticon}")
    path = os.path.join(datapath, f"colors/{cview}/{caticon}")
    header = Gtk.HeaderBar(title="catgameGTK")
    window.set_titlebar(header)
    header.set_show_close_button(True)

    main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)

    create_file_item = Gtk.Button(label=f"{langfile[50].strip()}")
    create_file_item.connect("clicked", store)
    header.pack_start(create_file_item)

    b_item = Gtk.Button(label=f"{langfile[51].strip()}")
    b_item.connect("clicked", infgame)
    header.pack_start(b_item)

    se_item = Gtk.Button(label="\u2699")
    se_item.connect("clicked", setti)
    header.pack_end(se_item)

    cat_grido = Gtk.Overlay()
    cat_grido.set_margin_top(25)
    cat_grido.set_margin_bottom(4)

    global het_item
    het_item = Gtk.Image()

    if 6 == len(cattxt):
        het_item.set_from_file(os.path.join(datapath, f"hats/{cattxt[5]}.png"))
        print(os.path.join(datapath, f"hats/{cattxt[5]}.png"))

    cat_grido.add_overlay(het_item)
    het_item.set_halign(Gtk.Align.CENTER)
    het_item.set_valign(Gtk.Align.CENTER)

    global q_item
    q_item = Gtk.Image.new_from_file(path)
    cat_grido.add(q_item)
    ceat()
    
    main_box.pack_start(cat_grido, False, False, 0)

    global inf_item
    inf_item = Gtk.Label(label=f"{langfile[56].strip()}: {name}")
    inf_item.set_hexpand(True)
    inf_item.set_margin_bottom(4)
    main_box.pack_start(inf_item, False, False, 4)

    butbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
    cat_grid = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
    
    o_item = Gtk.Button(label=f"{langfile[52].strip()}")
    o_item.connect("clicked", what)
    o_item.set_vexpand(True)
    o_item.set_hexpand(True)
    cat_grid.add(o_item)

    t_item = Gtk.Button(label=f"{langfile[53].strip()}")
    t_item.connect("clicked", game)
    t_item.set_hexpand(True)
    t_item.set_vexpand(True)
    cat_grid.add(t_item)
    butbox.add(cat_grid)

    cat_gridoco = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
    
    th_item = Gtk.Button(label=f"{langfile[54].strip()}")
    th_item.connect("clicked", pur)
    th_item.set_hexpand(True)
    th_item.set_vexpand(True)
    cat_gridoco.add(th_item)

    th_item = Gtk.Button(label=f"{langfile[55].strip()}")
    th_item.connect("clicked", cond)
    th_item.set_hexpand(True)
    th_item.set_vexpand(True)
    cat_gridoco.add(th_item)
    butbox.add(cat_gridoco)
    
    butbox.set_margin_start(20)
    butbox.set_margin_end(20)
    main_box.pack_start(butbox, True, True, 20)
    window.add(main_box)

    window.show_all()


def install():
    shdata = os.path.expanduser("~/.local/share")

    dialog = Gtk.Dialog(f"{langfile[14].strip()}", None, 0,
                        (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                         Gtk.STOCK_OK, Gtk.ResponseType.OK))


    input_box = Gtk.Entry()
    dialog.vbox.pack_start(input_box, True, True, 0)
    combo_box = Gtk.ComboBoxText()
    combo_box.append("1", langfile[17].strip())
    combo_box.append("2", langfile[18].strip())
    combo_box.set_active(0)
    dialog.vbox.pack_start(combo_box, True, True, 0)


    dialog.set_default_size(200, 70)
    dialog.set_resizable(False)
    dialog.show_all()

    response = dialog.run()

    if response == Gtk.ResponseType.OK:
        user_input = input_box.get_text()
        print(f"cat name: {user_input}")
        randome = random.randint(1, 3)
        typep = 'cat'
        if combo_box.get_active_text() == langfile[18].strip():
            randome = random.randint(1, 4)
            typep = 'seal'

        if os.path.isdir(cdata):
            print("pikimiki")
        else:
            os.makedirs(os.path.join(shdata, "catdata"), exist_ok=True)

        if user_input == "i dont care":
            # this part is needed to be destroyed 
            with open(os.path.join(cdata, "cat.txt"), "w") as f:
                f.write("jax\nsad and hungry\n0\nsad.png\njax\ncap")
        else:
            # this part is needed to be NOT destroyed 
            with open(os.path.join(cdata, "cat.txt"), "w") as f:
                f.write(f"{user_input}\nsad and hungry\n0\nsad.png\n{typep}/{randome}")
            
        dialog.destroy()
        main()
    else:
        dialog.destroy()


def start(app):
    if os.path.exists(os.path.join(cdata, "cat.txt")):
        main()
    else:
        install()


app = Gtk.Application(application_id="org.Igor360.catgameGTK")
app.connect("activate", start)
app.run(None)
